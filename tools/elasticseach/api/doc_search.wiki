= Описание =
`GET /ИНДЕКС/_search`

Выполняет выборку документов индекса по спецификации, которая может быть объявлена:
1. В параметрах запроса
{{{bash
curl \
	-X GET \
	"localhost:9200/bank/_search?q=*&sort=account_number:asc&pretty"
}}}

2. В теле запроса
{{{bash
curl \
	-X GET \
	--header "Content-Type: application/json" \
	localhost:9200/bank/_search \
	-d '
	{
		"query": { "match_all": {} },
		"sort": [
			{ "account_number": "asc" }
		]
	}
	'
}}}

Ответом будет следующий JSON:
{{{javascript
{
  "took" : 63, // Время выполнения запроса (в миллисекундах)
  "timed_out" : false, // Принимает true - если истекло выделенное на выполнение запроса время
  "_shards" : { // Статистика выполнения запроса
    "total" : 5, // Количество выполненных обысков
    "successful" : 5, // Количество успешных обысков
    "skipped" : 0, // Количество пропущеных обысков
    "failed" : 0 // Количество неудачных обысков
  },
  "hits" : { // Результаты запроса
    "total" : 1000, // Всего записей
    "max_score" : null,
    "hits" : [
			{
				"_index" : "bank",
				"_type" : "account",
				"_id" : "0",
				"sort": [0],
				"_score" : 1.0, // Релевантность документа условиям выборки
				"_source" : {"account_number":0,"balance":16623,"firstname":"Bradshaw","lastname":"Mckenzie","age":29,"gender":"F","address":"244 Columbus Place","employer":"Euron","email":"bradshawmckenzie@euron.com","city":"Hobucken","state":"CO"}
			},
			{
				"_index" : "bank",
				"_type" : "account",
				"_id" : "1",
				"sort": [1],
				"_score" : 0.8,
				"_source" : {"account_number":1,"balance":39225,"firstname":"Amber","lastname":"Duke","age":32,"gender":"M","address":"880 Holmes Lane","employer":"Pyrami","email":"amberduke@pyrami.com","city":"Brogan","state":"IL"}
			},
			...
    ]
  }
}
}}}

= Синтаксис =
== Проекция ==
* `_source` (по умолчанию все) - выбираемые поля документов

Пример выборки номера аккаунта и баланса:
{{{javascript
{
	"query": {"match_all": {}},
	"_source": ["account_number", "balance"]
}
}}}

== Фильтрация ==
Условие фильтрации задается в поле `query`, которое может содержать:

* `match_all` - выборка всех документов

{{{javascript
{
	"query": {"match_all": {}}
}
}}}

* `match` - поиск по слову

Пример выборки документов с адресом, содержащим "mill" или "lane":
{{{javascript
{
	"query": {"match": {"address": "mill lane"}}
}
}}}

* `match_phrase` - поиск по фразе

Пример выборки документов с адресом, содержащим "mill lane":
{{{javascript
{
	"query": {"match_phrase": {"address": "mill lane"}}
}
}}}

* `filter` - фильтрация выборки без влияния на релевантность
	* `range` - фильтрация по диапазону (границы включительно)

Пример выборки документов с балансом 20000-30000:
{{{javascript
{
	"query": {
		"bool": {
			"must": [
				{"match_all": {}}
			],
			"filter": {
				"range": {
					"balance": {
						"gte": 20000,
						"lte": 30000
					}
				}
			}
		}
	}
}
}}}

* `bool` - логическое выражение
	* `must` - логическое И
	* `must_not` - логическое НЕ
	* `should` - логическое ИЛИ

Пример выборки документов, возраст которых равен "30" или "40", но адрес который не содержит слов "mill" или "lane":
{{{javascript
{
	"query": {
		"bool": {
			"should": [
				{"match": {"age": 30}},
				{"match": {"age": 40}}
			],
			"must_not": [
				{"match": {"address": "mill lane"}}
			]
		}
	}
}
}}}

== Пагинация ==
* `size` (по умолчанию 10) - число выбираемых документов
* `from` (по умолчанию 0) - первый (включительно) выбираемый документ (начиная с 0)

Пример выборки 11-20 документов:
{{{javascript
{
	"query": {"match_all": {}},
	"from": 10,
	"size": 10
}
}}}

== Сортировка ==
* `sort` - сортировка по перечисленным полям

Пример выборки документов, отсортированных по возрасту:
{{{javascript
{
	"query": {"match_all": {}},
	"sort": [{"age": "asc"}]
}
}}}
