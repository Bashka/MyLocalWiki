= Декларации =
* `version` - используемая версия compose
* `services` - список контейнеров, входящих в сборку
	* `имя` - конфигурация контейнера с данным именем
		* `image` - используемый для контейнера образ
		* `build` - используемый для сборки образа контейнера `Dockerfile`
		* `command` - запускаемая в контейнере команда
		* `environment` - список переменных окружения контейнера
		* `env_file` - список файлов, содержащих список переменных окружения контейнера (по умолчанию используются все файлы с расширением `*.env`, найденные в каталоге сборки)
		* `ports` - список пробрасываемых портов
		* `volumes` - список пробрасываемых каталогов (томов)
		* `networks` - список сетей, в которые должен входить контейнер (по умолчанию создается новая сеть `default`)
		* `extends` - расширение существующего сервиса данным (конфигурация текущего сервиса будет переопределять расширяемый)
			* `service` - имя расширяемого сервиса
			* `file` - использование стороннего файла для загрузки сервиса
* `volumes` - список каталогов, входящих в сборку
	* `имя` - конфигурация каталога с данным именем
		* `driver` - используемый драйвер каталога
* `networks` - список сетей, входящих в сборку
	* `имя` - конфигурация сети с данным именем
		* `driver` - используемый драйвер сети

= Пример =
Файл `es.env`:
{{{
ENV=test
}}}

Файл `default_es.yml`:
{{{
default_es:
	volumes:
		- my_data:/var/tmp
}}}

Файл `docker-compose.yml`
{{{
version: "3"
services:
  es: # Сервис ElasticSearch
    image: elasticsearch # Используемый образ
		extends:
			file: default_es.yml
			service: default_es # Расширение дефолтной конфигурации сервиса используя файл
		env_file: # Файлы, содержащие переменные окружения
			- ./es.env
		networks:
			- backend
  web: # Сервис Web-Site
    build: . # Сборка образа из Dockerfile текущего каталога
    command: python app.py # Используемый entrypoin
		environment: # Переменные окружения
			- DEBUG=1
    ports: # Пробрасываемые порты
      - "5000:5000"
    volumes: # Пробрасываемые каталоги
      - my_data:/code
		networks: # Доступные контейнеру сети
			- backend
			- public
volumes:
	my_data: # Конфигурация каталога my_data по умолчанию
networks:
	backend: # Конфигурация сети backend
		driver: bridge # Использование драйвера bridge
	public:
		driver: host
	default: # Конфигурация дефолтной сети compose
		driver: host
}}}

Сборка и запуск:
{{{bash
docker-compose up
}}}
