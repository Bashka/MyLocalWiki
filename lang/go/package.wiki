= Пакет =
{{{go
package myPackage

...
}}}

Директива `package <name>` в начале файла объявлет пакет, которому принадлежит этот файл. Любой файл должен начинаться с этой дериктивы.

Пакет с именем `main` объявляет файл с функцией `main`, которая является точкой входа:
{{{go
package main

func main(){
	...
}
}}}

= Импорт пакета =
{{{go
package myPackage
import "fmt"
import "io/ioutil"

...
}}}

Директивы `import <package>` объявляют импортируемые пакеты (зависимости). Она должна идти сразу после директивы `package`. Все импортируемые пакеты должны использоваться в импортирующем их файле для успешной компиляции.

Несколько зависимостей можно указать в круглых скобках:
{{{go
package myPackage
import (
	"fmt"
	"os"
)

...
}}}

Для поиска пакетов, go использует переменные окружения `GOROOT` и `GOPATH`, хранящие адреса каталогов с пакетами. Первая переменная описывает расположение стандартных библиотек языка, а вторая локальных. К этим адресам добавляется суффикс `/src`, что требует располагать пакеты в этом каталоге. Файлы пакета должны располагаться в каталоге, соответствующем имени пакета.

Файловая структура:
{{{
/home/user/myGo/src
  myPackage/
	  say.go
		doc.go
	main.go
}}}

Переменные окружения:
{{{
GOROOT=/usr/lib/go-1.6
GOPATH=/home/user/myGo
}}}

Файл `src/myPackage/say.go`:
{{{go
package myPackage

import "fmt"

func SayHello(){
	fmt.Printf("Hello world")
}
}}}

Файл `src/main.go`:
{{{go
package main

import "myPackage"

func main() {
	myPackage.SayHello()
}
}}}

= Область видимости пакета =
Переменные и функции, объявленные вне тела функции, видны в области видимости пакета. Те из них, которые начинаются с заглавной буквы, являются экспортируемыми, и видны в пакетах, зависящих от данного (на пример `fmt.Printf`).

Для доступа к эспортированным переменным и функциям из другого пакета, необходимо явно указывать его (на пример `fmt.Printf` - доступ к функции `Printf` пакета `fmt`).

= Инициализация пакета =
Функция `init()`, объявленная в пакете, вызывается всякий раз при запуске программы и служит для инициализации переменных пакета, значения которых должно быть вычислено программно.

{{{go
// количество единичных битов в i
var pc [256]byte

func init() {
	for i, _ := range pc {
		pc[i] = pc[i/2] + byte(i&l)
	}
}
}}}

Для инициализации глобальных переменных в функции `init()` лучше отказаться от сокращенной формы объявления переменных в нем:

{{{go
var cwd string
func init() {
	cwd, err := os.Getwd(); // Глобальная переменная cwd останется неинициализированна, вместо нее будет объявлена локальная переменная cwd
	if err != nil {
		log.Fatalf("Ошибка os.Getwd failed: %v", err)
	}
}
}}}

Решение проблемы:

{{{go
var cwd string
func init() {
	var err error
	cwd, err = os.Getwd()
	if err != nil {
		log.Fatalf("Ошибка os.Getwd failed: %v", err)
	}
}
}}}
